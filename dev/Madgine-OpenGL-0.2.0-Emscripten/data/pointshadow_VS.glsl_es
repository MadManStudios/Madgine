#version 300 es
#ifdef GL_ARB_shader_draw_parameters
#extension GL_ARB_shader_draw_parameters : enable
#endif
#define readonly 
#define buffer uniform
#define std430 std140

struct PointShadowPerApplication
{
    mat4 p;
};

struct ArrayPtr
{
    uvec2 data;
};

struct PointShadowInstanceData
{
    mat4 mv;
    ArrayPtr bones;
    float _padding0;
    float _padding1;
};

layout(std140) uniform buffer0
{
    layout(row_major) PointShadowPerApplication app;
} PerApplication;

layout(std430) readonly buffer buffer4
{
    PointShadowInstanceData _m0[10];
} InstanceData;

layout(location = 0) in vec3 in_var_POSITION0;
layout(location = 1) in float in_var_POSITION1;
layout(location = 2) in vec2 in_var_POSITION2;
#ifdef GL_ARB_shader_draw_parameters
#define SPIRV_Cross_BaseInstance gl_BaseInstanceARB
#else
uniform int SPIRV_Cross_BaseInstance;
#endif
out vec4 out_var_POSITION;

mat4 spvWorkaroundRowMajor(mat4 wrap) { return wrap; }

void main()
{
    vec4 _54 = (vec4(in_var_POSITION0, in_var_POSITION1) * InstanceData._m0[uint((gl_InstanceID + SPIRV_Cross_BaseInstance))].mv) + vec4(in_var_POSITION2, 0.0, 0.0);
    gl_Position = _54 * spvWorkaroundRowMajor(PerApplication.app.p);
    out_var_POSITION = _54;
}


