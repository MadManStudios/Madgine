#version 300 es
#ifdef GL_ARB_shader_draw_parameters
#extension GL_ARB_shader_draw_parameters : enable
#endif
#define readonly 
#define buffer uniform
#define std430 std140

struct ScenePerApplication
{
    mat4 p;
    uint hasHDR;
    float ambientFactor;
    float diffuseFactor;
    float specularFactor;
};

struct DirectionalLight
{
    vec3 color;
    float _padding0;
    vec3 dir;
    float _padding1;
};

struct ShadowCaster
{
    mat4 reprojectionMatrix;
    int shadowSamples;
    float _padding0;
    float _padding1;
    float _padding2;
};

struct DirectionalShadowLight
{
    DirectionalLight light;
    ShadowCaster caster;
};

struct PointLight
{
    vec3 position;
    float _padding0;
    vec3 color;
    float _padding1;
    float constantFactor;
    float linearFactor;
    float squaredFactor;
    float _padding2;
};

struct PointShadowLight
{
    PointLight light;
    ShadowCaster caster;
};

struct ScenePerFrame
{
    int pointLightCount;
    float _padding0;
    float _padding1;
    float _padding2;
    DirectionalShadowLight light;
    PointShadowLight pointLights[2];
};

struct ArrayPtr
{
    uvec2 data;
};

struct SceneInstanceData
{
    mat4 mv;
    mat4 anti_mv;
    vec4 diffuseColor;
    vec4 specularColor;
    ArrayPtr bones;
    float _padding0;
    float _padding1;
};

layout(std140) uniform buffer0
{
    layout(row_major) ScenePerApplication app;
} PerApplication;

layout(std140) uniform buffer1
{
    layout(row_major) ScenePerFrame frame;
} PerFrame;

layout(std430) readonly buffer buffer4
{
    SceneInstanceData _m0[10];
} InstanceData;

layout(location = 0) in vec3 in_var_POSITION0;
layout(location = 1) in float in_var_POSITION1;
layout(location = 2) in vec2 in_var_POSITION2;
layout(location = 3) in vec3 in_var_NORMAL;
layout(location = 4) in vec4 in_var_COLOR;
layout(location = 5) in vec2 in_var_TEXCOORD;
#ifdef GL_ARB_shader_draw_parameters
#define SPIRV_Cross_BaseInstance gl_BaseInstanceARB
#else
uniform int SPIRV_Cross_BaseInstance;
#endif
out vec4 out_var_COLOR;
out vec4 out_var_POSITION;
out vec3 out_var_NORMAL;
out vec2 out_var_TEXCOORD0;
out vec4 out_var_TEXCOORD1;

mat4 spvWorkaroundRowMajor(mat4 wrap) { return wrap; }

void main()
{
    vec4 _84 = vec4(in_var_POSITION0, in_var_POSITION1) * InstanceData._m0[uint((gl_InstanceID + SPIRV_Cross_BaseInstance))].mv;
    out_var_COLOR = in_var_COLOR * InstanceData._m0[uint((gl_InstanceID + SPIRV_Cross_BaseInstance))].diffuseColor;
    out_var_POSITION = _84;
    out_var_NORMAL = in_var_NORMAL * mat3(InstanceData._m0[uint((gl_InstanceID + SPIRV_Cross_BaseInstance))].anti_mv[0].xyz, InstanceData._m0[uint((gl_InstanceID + SPIRV_Cross_BaseInstance))].anti_mv[1].xyz, InstanceData._m0[uint((gl_InstanceID + SPIRV_Cross_BaseInstance))].anti_mv[2].xyz);
    out_var_TEXCOORD0 = in_var_TEXCOORD;
    out_var_TEXCOORD1 = _84 * spvWorkaroundRowMajor(PerFrame.frame.light.caster.reprojectionMatrix);
    gl_Position = (_84 + vec4(in_var_POSITION2, 0.0, 0.0)) * spvWorkaroundRowMajor(PerApplication.app.p);
}


