# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build documentation

on:
  push:
    branches: [ "master" ]

jobs:
  docs:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
  
    - uses: paulhatch/semantic-version@v5.4.0
      id: version
      with:
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "(MAJOR)"
        # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
        major_regexp_flags: ""
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "(MINOR)"
        # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
        minor_regexp_flags: ""
        # A string to determine the format of the version output
        version_format: "${major}.${minor}.${patch}"
        # Optional path to check for changes. If any changes are detected in the path the
        # 'changed' output will true. Enter multiple paths separated by spaces.
        change_path: ""
        # Named version, will be used as suffix for name version tag
        namespace: ""
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: false
        # If bump_each_commit is also set to true, setting this value will cause the version to increment only if the pattern specified is matched.
        bump_each_commit_patch_pattern: ""
        # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
        search_commit_body: false
        # The output method used to generate list of users, 'csv' or 'json'.
        user_format_type: "json"
        # Prevents pre-v1.0.0 version from automatically incrementing the major version.
        # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
        enable_prerelease_mode: false
        # If enabled, diagnostic information will be added to the action output.
        debug: false
        # If true, the branch will be used to select the maximum version.
        version_from_branch: false

    - uses: mattnotmitt/doxygen-action@v1.9.5
      env:
        MADGINE_VERSION: ${{ steps.version.outputs.version }}
      with:
        doxyfile-path: 'docs/Doxyfile'

    - uses: ammaraskar/sphinx-action@master
      env:
        MADGINE_VERSION: ${{ steps.version.outputs.version }}
      with:
        docs-folder: "."
        pre-build-command: "pip install sphinx_rtd_theme doxysphinx;doxysphinx build docs doc/docs docs/doxygen"
        build-command: "sphinx-build -b html . doc -c docs"

    - name: Upload static files as artifact
      id: deployment
      uses: actions/upload-pages-artifact@v3 # or specific "vX.X.X" version tag for this action
      with:
        path: doc/

  # Deploy job
  deploy:
    # Add a dependency to the build job
    needs: docs

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # or specific "vX.X.X" version tag for this action
