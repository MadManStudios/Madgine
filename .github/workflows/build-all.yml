# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master", "dev" ]
  pull_request:
    branches: [ "master" ]

jobs:
  configuration:
    name: configuration  
    runs-on: ubuntu-latest

        
    steps:
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      shell: bash
      run: |
        echo "Setting up configuration"
          

    outputs:
      platforms: "{
        \"windows\": \"windows-latest\", 
        \"osx\": \"macos-latest\", 
        \"ios\": \"macos-latest\", 
        \"linux\": \"ubuntu-latest\", 
        \"android\": \"ubuntu-latest\", 
        \"emscripten\": \"ubuntu-latest\"}"
      toolchains: "{
        \"windows\": \"\", 
        \"osx\": \"\", 
        \"ios\": \"\", 
        \"linux\": \"\", 
        \"android\": \"\", 
        \"emscripten\": \"\"}"
    
  build-plugins:
  
    needs: configuration

    runs-on: ${{ matrix.platform }}

    
    permissions:
      contents: write


    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        platform: [windows-latest, macos-latest, ubuntu-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

        
    - uses: paulhatch/semantic-version@v5.4.0
      id: version
      with:
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "(MAJOR)"
        # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
        major_regexp_flags: ""
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "(MINOR)"
        # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
        minor_regexp_flags: ""
        # A string to determine the format of the version output
        version_format: "${major}.${minor}.${patch}"
        # Optional path to check for changes. If any changes are detected in the path the
        # 'changed' output will true. Enter multiple paths separated by spaces.
        change_path: ""
        # Named version, will be used as suffix for name version tag
        namespace: ""
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: false
        # If bump_each_commit is also set to true, setting this value will cause the version to increment only if the pattern specified is matched.
        bump_each_commit_patch_pattern: ""
        # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
        search_commit_body: false
        # The output method used to generate list of users, 'csv' or 'json'.
        user_format_type: "json"
        # Prevents pre-v1.0.0 version from automatically incrementing the major version.
        # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
        enable_prerelease_mode: false
        # If enabled, diagnostic information will be added to the action output.
        debug: false
        # If true, the branch will be used to select the maximum version.
        version_from_branch: false


    - name: Patch Dependencies
      if: github.event_name != 'pull_request' && github.ref_name == 'master'
      run: |
        echo "https://github.com/MadManStudios/MadgineSentry.git" >> ${{ github.workspace }}/dependencies.txt

    - name: Install Dependencies
      if: matrix.platform == 'ubuntu-latest'
      run: |
        sudo apt-get install libx11-dev mesa-utils libgl1-mesa-dev

    - name: Set up Clang
      if: matrix.platform == 'ubuntu-latest'
      uses: egor-tensin/setup-clang@v1
      with:
        version: latest
        platform: x64

    - name: Configure CMake
      env:
        MADGINE_VERSION: ${{ steps.version.outputs.version }}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ github.workspace }}/build
        -DCMAKE_BUILD_TYPE=RelWithDebInfo
        -DUSE_CMAKE_LOG=1 
        -DBUILD_SHARED_LIBS=ON
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ github.workspace }}/build --config RelWithDebInfo --verbose

    - name: Test
      working-directory: ${{ github.workspace }}/build
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config RelWithDebInfo --output-on-failure

    - name: Package
      working-directory: ${{ github.workspace }}/build
      if: github.event_name != 'pull_request' && github.ref_name == 'master'
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: cpack

    - name: Release
      uses: softprops/action-gh-release@v2
      if: github.event_name != 'pull_request' && github.ref_name == 'master'
      with:
        name: ${{ steps.version.outputs.version_tag }}
        tag_name: ${{ steps.version.outputs.version_tag }}
        files: ${{ github.workspace }}/build/packages/*

    - name: Pushing Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}
        path: ${{ github.workspace }}/build/bin
        overwrite: true

  build-configs:
  
    needs: [configuration, build-plugins]

    runs-on: ${{ fromJSON(needs.configuration.outputs.platforms)[matrix.platform] }}    

    
    permissions:
      contents: write


    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        platform: [windows, osx, ios, linux, android, emscripten]
        exclude:
          - platform: osx
          - platform: ios
          - platform: android
          - platform: emscripten

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        
    - name: Patch Dependencies
      if: github.event_name != 'pull_request'
      run: |
        echo "https://github.com/MadManStudios/MadgineSentry.git" >> ${{ github.workspace }}/dependencies.txt
        
    - name: Install Dependencies
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get install libx11-dev mesa-utils libgl1-mesa-dev

    - name: Set up Clang
      if: matrix.platform == 'latest'
      uses: egor-tensin/setup-clang@v1
      with:
        version: latest
        platform: x64

    - uses: paulhatch/semantic-version@v5.4.0
      id: version
      with:
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "(MAJOR)"
        # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
        major_regexp_flags: ""
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "(MINOR)"
        # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
        minor_regexp_flags: ""
        # A string to determine the format of the version output
        version_format: "${major}.${minor}.${patch}"
        # Optional path to check for changes. If any changes are detected in the path the
        # 'changed' output will true. Enter multiple paths separated by spaces.
        change_path: ""
        # Named version, will be used as suffix for name version tag
        namespace: ""
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: false
        # If bump_each_commit is also set to true, setting this value will cause the version to increment only if the pattern specified is matched.
        bump_each_commit_patch_pattern: ""
        # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
        search_commit_body: false
        # The output method used to generate list of users, 'csv' or 'json'.
        user_format_type: "json"
        # Prevents pre-v1.0.0 version from automatically incrementing the major version.
        # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
        enable_prerelease_mode: false
        # If enabled, diagnostic information will be added to the action output.
        debug: false
        # If true, the branch will be used to select the maximum version.
        version_from_branch: false


    - name: Fetching Artifacts
      uses: actions/download-artifact@v4
      with:
        # Name of the artifact to download.
        # If unspecified, all artifacts for the run are downloaded.
        # Optional.
        name: ${{ fromJSON(needs.configuration.outputs.platforms)[matrix.platform] }}    
        path: tooling

    - name: Configure CMake
      env:
        MADGINE_VERSION: ${{ steps.version.outputs.version }}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ github.workspace }}/build
        -DCMAKE_BUILD_TYPE=RelWithDebInfo
        -DUSE_CMAKE_LOG=1 
        -DMADGINE_CONFIGURATION=test/configs/OpenGL/
        -DBUILD_SHARED_LIBS=OFF 
        -DMADGINE_TOOLING_PRESET=tooling
        ${{ fromJSON(needs.configuration.outputs.toolchains)[matrix.platform] }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ github.workspace }}/build --config RelWithDebInfo --verbose

    - name: Test
      working-directory: ${{ github.workspace }}/build
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config RelWithDebInfo --output-on-failure

    - name: Package
      working-directory: ${{ github.workspace }}/build
      if: github.event_name != 'pull_request' && github.ref_name == 'master'
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: cpack

    - name: Release
      uses: softprops/action-gh-release@v2
      if: github.event_name != 'pull_request' && github.ref_name == 'master'
      with:
        name: ${{ steps.version.outputs.version_tag }}
        tag_name: ${{ steps.version.outputs.version_tag }}
        files: ${{ github.workspace }}/build/packages/*
          
