# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "dev" ]
#  pull_request:
#    branches: [ "master" ]

jobs:
  configuration:
    name: configuration  
    runs-on: ubuntu-latest

        
    steps:
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      shell: bash
      run: |
        echo "Setting up configuration"
          

    outputs:
      platforms: "{
        \"windows\": \"windows-latest\", 
        \"osx\": \"macos-latest\", 
        \"ios\": \"macos-latest\", 
        \"linux\": \"ubuntu-latest\", 
        \"android\": \"ubuntu-latest\", 
        \"emscripten\": \"ubuntu-latest\"}"
      configs: "{
        \"OpenGL\": \"-DMADGINE_CONFIGURATION=test/configs/OpenGL/ -DBUILD_SHARED_LIBS=OFF _DMADGINE_TOOLING_PRESET=??\", 
        \"Plugins\": \"-DBUILD_SHARED_LIBS=ON\"}"
      toolchains: "{
        \"windows\": \"\", 
        \"osx\": \"\", 
        \"ios\": \"\", 
        \"linux\": \"\", 
        \"android\": \"\", 
        \"emscripten\": \"\"}"
    
  build:
  
    needs: configuration

    runs-on: ${{ fromJSON(needs.configuration.outputs.platforms)[matrix.platform] }}    

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        platform: [windows, osx, ios, linux, android, emscripten]
        build_type: [Debug, RelWithDebInfo]
        config: [Plugins, OpenGL]
        exclude:
          - config: Plugins
            platform: ios
          - config: Plugins
            platform: android
          - config: Plugins
            platform: emscripten
          - platform: ios
          - platform: android
          - platform: emscripten

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive


    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ github.workspace }}/build
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DUSE_CMAKE_LOG=1 
        ${{ fromJSON(needs.configuration.outputs.configs)[ matrix.config ] }}
        ${{ fromJSON(needs.configuration.outputs.toolchains)[matrix.platform] }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }} --verbose

    - name: Test
      working-directory: ${{ github.workspace }}/build
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
